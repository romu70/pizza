---
import { languages } from '../i18n/ui';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---
<div id="menu">
  <div class="dropdown language-dropdown">
    <button class="dropdown-toggle" aria-haspopup="true" aria-expanded="false">
      <span class="current-language">{languages[lang]}</span>
      <span class="dropdown-arrow">▼</span>
    </button>
    <ul class="dropdown-menu" role="menu">
      {Object.entries(languages).map(([langCode, label]) => (
        langCode !== lang && (
          <li role="none">
            <a href={`/${langCode}/`} role="menuitem">{label}</a>
          </li>
        )
      ))}
    </ul>
  </div>
  <div class="dropdown nav-dropdown">
    <button class="nav-dropdown-toggle" aria-haspopup="true" aria-expanded="false">
      <span class="nav-label">{t('nav.menu')}</span>
      <span class="dropdown-arrow">▼</span>
    </button>
    <ul class="nav-dropdown-menu" role="menu">
      <li role="none">
        <a href={`/${lang}/`} role="menuitem">{t('nav.home')}</a>
      </li>
      <li role="none">
        <a href={`/${lang}/feedback`} role="menuitem">{t('nav.feedback')}</a>
      </li>
      <li role="none">
        <a href={`/${lang}/about`} role="menuitem">{t('nav.about')}</a>
      </li>
    </ul>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Language dropdown functionality
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    const dropdownMenu = document.querySelector('.dropdown-menu');

    if (dropdownToggle && dropdownMenu) {
      dropdownToggle.addEventListener('click', function(this: HTMLElement) {
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        this.setAttribute('aria-expanded', String(!isExpanded));
        dropdownMenu.classList.toggle('show');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const target = event.target as Node;
        if (!dropdownToggle.contains(target) && !dropdownMenu.contains(target)) {
          dropdownToggle.setAttribute('aria-expanded', 'false');
          dropdownMenu.classList.remove('show');
        }
      });
    }

    // Navigation dropdown functionality
    const navDropdownToggle = document.querySelector('.nav-dropdown-toggle');
    const navDropdownMenu = document.querySelector('.nav-dropdown-menu');

    if (navDropdownToggle && navDropdownMenu) {
      navDropdownToggle.addEventListener('click', function(this: HTMLElement) {
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        this.setAttribute('aria-expanded', String(!isExpanded));
        navDropdownMenu.classList.toggle('show');
      });

      // Close nav dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const target = event.target as Node;
        if (!navDropdownToggle.contains(target) && !navDropdownMenu.contains(target)) {
          navDropdownToggle.setAttribute('aria-expanded', 'false');
          navDropdownMenu.classList.remove('show');
        }
      });
    }
  });
</script>

<style>
  #menu {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 1rem;
    width: 100%;
  }

  #menu a:hover,
  #menu a:focus {
    background-color: var(--main-color);
    color: var(--active-background-color);
  }

  #menu.expanded {
    margin-top: 0.5rem;
    visibility: visible;
    flex-direction: column;
    align-items: flex-start;
    background-color: var(--active-background-color);
    gap: 0.5rem;
    padding: 1rem;
    border-radius: 4px;
  }

  #menu.expanded .dropdown-menu,
  #menu.expanded .nav-dropdown-menu {
    position: static;
    box-shadow: none;
    border: none;
    margin-top: 0.5rem;
    width: 100%;
    background-color: white;
  }

  .dropdown  {
    min-width: 30%;
  }

  @media (min-width: 768px) {
    #menu {
      display: flex;
      flex-direction: row;
      align-items: flex-end;
      align-content: end;
      width: 80%;
      visibility: visible;
      margin: auto;
    }
  }

  @media (min-width: 1024px) {
    #menu {
      width: 70%;
    }
  }

  @media (min-width: 1280px) {
    #menu {
      width: 60%;
    }
  }

  /* Dropdown Styles */
  .language-dropdown,
  .nav-dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-toggle,
  .nav-dropdown-toggle {
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 4px;
    font-size: inherit;
    color: inherit;
    transition: background-color 0.2s ease;
    justify-content: center;
  }

  .dropdown-toggle:hover,
  .dropdown-toggle:focus,
  .nav-dropdown-toggle:hover,
  .nav-dropdown-toggle:focus {
    background-color: var(--main-color);
    color: var(--active-background-color);
  }

  .dropdown-arrow {
    font-size: 0.8em;
    transition: transform 0.2s ease;
  }

  .dropdown-toggle[aria-expanded="true"] .dropdown-arrow,
  .nav-dropdown-toggle[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu,
  .nav-dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    background-color: white;
    border: 1px solid var(--main-color);
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    list-style: none;
    margin: 0;
    padding: 0;
    min-width: 200px;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
  }

  @media (max-width: 767px) {
    .dropdown-menu,
    .nav-dropdown-menu {
      min-width: 100%;
      left: 0;
      right: 0;
    }
  }

  .dropdown-menu.show,
  .nav-dropdown-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-menu li,
  .nav-dropdown-menu li {
    margin: 0;
  }

  .dropdown-menu a,
  .nav-dropdown-menu a {
    display: block;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: inherit;
    transition: background-color 0.2s ease;
  }

  .dropdown-menu a:hover,
  .dropdown-menu a:focus,
  .nav-dropdown-menu a:hover,
  .nav-dropdown-menu a:focus {
    background-color: var(--main-color);
    color: var(--active-background-color);
  }

  .dropdown-menu li:first-child a,
  .nav-dropdown-menu li:first-child a {
    border-radius: 4px 4px 0 0;
  }

  .dropdown-menu li:last-child a,
  .nav-dropdown-menu li:last-child a {
    border-radius: 0 0 4px 4px;
  }


</style>
