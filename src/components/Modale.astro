---
// import { Debug } from "astro:components";
import { Image } from 'astro:assets';
import Ingredient from "../components/Ingredient.astro";
import Button from "../components/Button.astro";
import flourSvg from '../images/flour.svg';
import oliveSvg from '../images/olive.svg';
import saltSvg from '../images/salt.svg';
import waterSvg from '../images/water.svg';
import weightSvg from '../images/weight.svg';
import yeastSvg from '../images/yeast.svg';
import blankSvg from '../images/blank.svg';

import { getLangFromUrl, useTranslations } from '../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---

<dialog>
  <h2>{t('modale.title')}</h2>
  <p class="right-aligned caption">{t('modale.helper')}</p>
  <Ingredient id="flour" type={t('modale.flour')} value="" symbol={flourSvg} />
  <Ingredient id="water" type={t('modale.water')} value="" symbol={waterSvg}/>
  <Ingredient id="oil" type={t('modale.oil')} value="" symbol={oliveSvg}/>
  <Ingredient id="salt" type={t('modale.salt')} value="" symbol={saltSvg}/>
  <Ingredient id="weight" type={t('modale.total')} value="" symbol={weightSvg}/>
  <Ingredient id="yeast" type={t('modale.yeast')} value="" symbol={yeastSvg}/>
  <p id="final-yeast-caption" class="right-aligned caption">test</p>
  <Button label={t('modale.button.text')}>
</dialog>

<script>
  import { useTranslations } from '../i18n/utils';
  import { languages, ui } from '../i18n/ui';
  const lang = document.documentElement.lang;
  // console.log("modale.lang: ", lang);
  const t = useTranslations(lang as keyof typeof languages);

  document.addEventListener("DOMContentLoaded", function () {
    let form = document.getElementById("pizza");
    form?.addEventListener("submit", onCompute);

    removeBorder("yeast-fresh");
    removeBorder("yeast-dry");
  });

  const dialog = document.querySelector("dialog");
  const button = document.querySelector("dialog button");
  button?.addEventListener("click", () => {
    if (dialog) {
      dialog.style.visibility = "hidden";
      dialog.close();
      let overlay = document.getElementById("overlay");
      if(overlay) {
        overlay.style.visibility = "hidden";
      }
    }
  });

  function removeBorder(id: string) {
    let yd = document.getElementById(id);
    if(yd) {
      yd.style.border = "none";
    }
  }

  function onCompute(e: Event) {
    // showing the dialog is made in the index submit callback
    let unitWeight = Number(getInputValue("weight"));
    let quantity = Number(getInputValue("quantity"));
    let waterRate = Number(getInputValue("water")) / 100;
    let oilRate = Number(getInputValue("oil")) / 100;
    let saltRate = Number(getInputValue("salt")) / 100;

    let yeastTypeInput: HTMLInputElement | null = document.querySelector('input[name="yeast-type"]:checked');
    let yeastType = "";
    if(yeastTypeInput) {
      yeastType = yeastTypeInput.value === "fresh" ? t('form.yeast-type.fresh') : t('form.yeast-type.dry');
      // console.log(yeastType);
    }
    let yeastRate = Number(getInputValue("yeast"));
    // console.log("yeastRate: ", yeastRate);

    let weight = unitWeight * quantity;
    let rate = 1 + waterRate + oilRate + saltRate;
    let flour = weight / rate;
    let water = flour * waterRate
    let oil = flour * oilRate;
    let salt = flour * saltRate;
    let yeast;
    let factor: number = 0;
    if(lang !== "en-US") {
      flour = Math.round(flour);
      water = Math.round(water);
      oil = Math.round(oil);
      salt = Math.round(salt);
      factor = 1000;
    } else {
      factor = 16;
    }
    yeast = (yeastRate * flour) / factor;
    // console.log("yeast: ", yeast);

    if(lang !== "en-US") {
      setValue("flour", flour.toString());
      setValue("water", water.toString());
      setValue("oil", oil.toString());
      setValue("salt", salt.toString());
      setValue("weight", weight.toString());
    } else {
      setValue("flour", flour.toFixed(1));
      setValue("water", water.toFixed(1));
      setValue("oil", oil.toFixed(1));
      setValue("salt", salt.toFixed(1));
      setValue("weight", weight.toFixed(1));
    }

    setValue("yeast", yeast.toFixed(1));

    // Set the yeast label to specify the type
    let yeastField = document.querySelector("#yeast .left span");
    if(yeastField && yeastField.textContent) {
      let message: string = "";
      if(lang !== "fr-FR") {
        message = t('modale.yeast').replace("${yeast.eq.type}", yeastType[0].toUpperCase() + yeastType.slice(1));
      } else {
        message = t('modale.yeast').replace("${yeast.eq.type}", yeastType[0].toLowerCase() + yeastType.slice(1));
      }

      yeastField.textContent = message;
    }

    removeBorder("yeast");

    let yeastCaption = document.getElementById("final-yeast-caption");
    let yeastEquivalent: string;
    let yeastWeight: number = 0;
    let yeastEqtype: string;
    console.log(yeast);
    if(yeastCaption) {
      if(yeastType === t('form.yeast-type.fresh')) {
        yeastWeight = yeast / 2.5;
        yeastEqtype = t('form.yeast-type.dry').toLowerCase();
      } else { // dry
        yeastWeight = yeast * 2.5;
        yeastEqtype = t('form.yeast-type.fresh').toLowerCase();
      }
      console.log(flour);

      yeastEquivalent = t('modale.yeast.eq').replace("${yeast.eq.value}", yeastWeight.toFixed(1)).replace("${yeast.eq.type}", yeastEqtype).replace("${yeast.eq.rate}", (yeastWeight * factor / flour).toFixed(1));
      yeastCaption.textContent = yeastEquivalent;
    }
  }

  function getInputValue(name: string) {
    let input: HTMLInputElement | null = document.querySelector(`input[name="${name}"]`);
    return input ? input.value : null;
  }

  function setValue(key: string, value: string) {
    let field = document.getElementById(key);
    if (field) {
      // console.log(field.children[1]);
      field.children[1].textContent = value.toString();
    }
  }
</script>

<style>
  .right-aligned {
    width: 100%;
    text-align: right;
  }

  dialog {
    padding: 2rem;
    border-radius: 1rem;
    border: none;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    box-shadow: rgba(0, 0, 0, 0.45) 0px 15px 25px;
    visibility: hidden;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 30rem;
  }

  #final-yeast-caption {
    margin-top: -0.75rem;
  }
</style>
