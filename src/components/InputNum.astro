---
import "../styles/main.css";
// import { Debug } from "astro:components";
const { label, id, min, max, step } = Astro.props;
---

<div class="input-num" data-id={id}>
  <label>{label}</label>
  <div class="controls" data-id={id}>
    <button class="less" type="button" name="-" value="-" data-id={id}>-</button>
    <input
      name={id}
      type="number"
      min={min}
      max={max}
      data-id={id}
      step={step}
      value={min}
      inputmode="numeric"
    />
    <button class="more" type="button" name="+" value="+" data-id={id}>+</button>
  </div>
</div>

<script>
  type Divs = NodeListOf<HTMLElement> | null | undefined;
  type Inputs = NodeListOf<HTMLInputElement> | null | undefined;
  type Div = HTMLElement | null | undefined;
  let value: number = 0;
  let inputsNum: Divs = null;
  let input: HTMLInputElement | null = null;
  let inputs: Inputs = null;

  document.addEventListener("DOMContentLoaded", function () {
    inputsNum = document.querySelectorAll(".input-num .controls button");
    addButtonsClick();

    // init inputs value with min
    inputs = document.querySelectorAll(".input-num .controls input");
    inputs?.forEach((input) => {
      if (input.dataset.min) {
        input.value = input.dataset.min;
      }
    });
  });

  function increment() {
    value = Math.min(value + 1, 99);
    // console.log("increment - new value: " + value);
    // dispatchEvent(new CustomEvent("change", { detail: value }));
  }

  function decrement() {
    value = Math.max(value - 1, 0);
    // console.log("decrement - new value: " + value);
    // dispatchEvent(new CustomEvent("change", { detail: value }));
  }

  function addButtonsClick() {
    inputsNum?.forEach((button) => {
      button.addEventListener("click", onButtonClick);
    });
  }

  function onButtonClick(this: HTMLButtonElement, e: Event) {
    // Get the id to get the proper input
    let id: string = this.dataset.id ? this.dataset.id : "undefined";

    let input: HTMLInputElement | null = document.querySelector(
      `.input-num .controls input[data-id="${id}"]`,
    );

    // Get min and max values
    let min: number = Number(input?.min);
    let max: number = Number(input?.max);
    let step: number = Number(input?.step);
    let value: number = Number(input?.value);

    if (this.name === "+") {
      value = Math.min(value + step, max);
    } else {
      value = Math.max(value - step, min);
    }

    if (input) {
      // input.value = value.toString();
      // Round decimal values
      if (step < 1) {
        input.value = value.toFixed(1);
      } else {
        input.value = value.toString();
      }
    }
  }
</script>

<style>
  .input-num {
    display: flex;
    flex-direction: column;
    color: var(--main-color);
    font-weight: 500;
    gap: 0.5rem;
    align-items: center;
    width: 100%;
  }

  .input-num label,
  #yeast-type label {
    font-size: 1.2rem;
    text-align: center;
  }

  input {
    font-weight: 600;
    font-size: 1.2rem;
    text-align: center;
    border-radius: 0px;
    padding: 0.5rem;
    border: none;
    border-top: 1px solid #aaa;
    border-bottom: 1px solid #aaa;
    height: 3.5rem;
  }

  input[type="number"] {
    width: 100%;
  }

  .controls {
    display: flex;
    justify-content: center;
    width: 100%;
    align-items: center;
  }

  button.less,
  button.more {
    padding: 0.85rem 1.2rem;
    font-size: 1.5rem;
    font-weight: 600;
    width: 4rem;
    margin: 0;
    border: none;
    color: white;
  }

  button.less {
    border-radius: 0.5rem 0 0 0.5rem;
    background-color: var(--italian-green);
  }

  button.more {
    border-radius: 0 0.5rem 0.5rem 0;
    background-color: var(--italian-red);
  }
</style>
